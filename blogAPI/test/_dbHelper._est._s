/*
import { MongoClient, Db, Collection } from 'mongodb';
import { insertPost, getPostList } from '../lib/dbHelper';
import { Post } from '../lib/modules';
import {  uri } from "../lib/db";


jest.mock('mongodb');

describe('getPostList', () => {
    let client: MongoClient;
    let db: Db;
    let collection: Collection;

    beforeEach(() => {
        client = new MongoClient(uri);
        db = client.db('test');
        collection = db.collection('posts');
    });

    afterEach(() => {
        jest.clearAllMocks();
    });

    it('returns null if posts list is empty', async () => {
        const mockFind = jest.fn().mockReturnValueOnce([]);
        collection.find = mockFind;

        const result = await getPostList();

        expect(result).toBeNull();
        expect(mockFind).toHaveBeenCalledTimes(1);
    });

    it('returns the posts list if it is not empty', async () => {
        const mockPostsList = [{ title: 'Post 1' }, { title: 'Post 2' }];
        const mockFind = jest.fn().mockReturnValueOnce(mockPostsList);
        collection.find = mockFind;

        const result = await getPostList();

        expect(result).toEqual(mockPostsList);
        expect(mockFind).toHaveBeenCalledTimes(1);
    });

    it('returns null if there is an error', async () => {
        const mockError = new Error('Test error');
        const mockFind = jest.fn().mockImplementationOnce(() => {
            throw mockError;
        });
        collection.find = mockFind;

        const result = await getPostList();

        expect(result).toBeNull();
        expect(console.error).toHaveBeenCalledWith(mockError);
        expect(mockFind).toHaveBeenCalledTimes(1);
    });
});


*/



// describe('insertPost', () => {
//   let client: MongoClient;
//   let db: Db;

//   beforeAll(() => {
//     client = new MongoClient();
//     db = client.db();
//   });

//   afterAll(async () => {
//     await client.close();
//   });

//   it('inserts a post into the database', async () => {
//     const post: Post = { /* create a test post object */ };
//     const collectionMock = {
//       insertOne: jest.fn().mockResolvedValue({ result: { ok: 1 } }),
//     };
//     jest.spyOn(db, 'collection').mockReturnValue(collectionMock);

//     await insertPost(post);

//     expect(db.collection).toHaveBeenCalledWith('your-collection-name'); // replace this with the actual name of your collection
//     expect(collectionMock.insertOne).toHaveBeenCalledWith(post);
//     expect(console.log).toHaveBeenCalledWith('Value inserted successfully');
//   });

//   it('handles errors', async () => {
//     const post: Post = { /* create a test post object */ };
//     const collectionMock = {
//       insertOne: jest.fn().mockRejectedValue(new Error('Failed to insert post')),
//     };
//     jest.spyOn(db, 'collection').mockReturnValue(collectionMock);
//     jest.spyOn(console, 'error').mockImplementation();

//     await expect(insertPost(post)).rejects.toThrow('Failed to insert post');

//     expect(db.collection).toHaveBeenCalledWith('your-collection-name'); // replace this with the actual name of your collection
//     expect(collectionMock.insertOne).toHaveBeenCalledWith(post);
//     expect(console.error).toHaveBeenCalledWith(expect.any(Error));
//   });
// });



// using Jest:
/**
 * 
 * It sets up a mock MongoClient and Db instance using Jest's built-in mocking functionality.
 * It defines two test cases using the it function: one for the successful case and one for the error case.
 * 
 * In the successful case, it creates a mock collection object using Jest's jest.fn() function, 
 * sets up a spy on the db.collection method to return the mock collection object, and calls 
 * the insertPost function with a test post object. It then checks that the db.collection method 
 * was called with the correct collection name, the insertOne method was called with the test post object, and console.log was called with the success message.
 * 
 * In the error case, it creates a mock collection object that rejects the insertOne method with an error, sets up a spy on the 
 * db.collection method to return the mock collection object, and calls the insertPost function with a test post object. 
 * It then checks that the db.collection method was called with the correct collection name, the insertOne method was called 
 * with the test post object, and console.error was called with an Error object.
 */